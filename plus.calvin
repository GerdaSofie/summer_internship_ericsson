component MediaPlayer() dict -> {

    const : std.Constant(data=true)
    mush : text.Mustache(fmt="{{data}}.ogg")
    player : media.MediaPlayer2()

    .dict > mush.dict
    mush.text > player.mediafile
    const.token > player.play

}


component ClearRFID() -> ontrue {
  /* component som rensar ut falsevärdet som kommer när du plockar bort idt från läsaren och skickar ut rfid datan on true. */
  rfid : sensor.RFIDReader()
  select : flow.Select()
  status : json.GetValue()

  voidport > rfid.data
  rfid.data > select.data
  rfid.data > status.container
  "status" > status.key
  status.value > select.select

  select.case_false > voidport
  select.case_true > .ontrue
}

component MediaPlayerUt() dict -> {
  /* component som spelat upp ett välkommst meddelande*/
    const : std.Constant(data=true)
    mush : text.Mustache(fmt="{{data}}.ogg")
    player : media.MediaPlayer2()

    .dict > mush.dict
    mush.text > player.mediafile
    const.token > player.play
}

component InOrOut() data, antal -> in, out {
  /* componenet som bestämer om personen går in eller ut och vem det är*/
  /* outporten in skickar ut id.t när någon går in, out skickar id.t när någon går ut från rummet*/
  select : flow.Select()
  getv : json.GetValue()
  compare : std.Compare(rel=">=")
  init : flow.Init(data="1")

  .antal > compare.a
  .antal > init.in
  init.out > compare.b
  compare.result > select.select

  .data > getv.container
  "data" > getv.key

  getv.value > select.data
  select.case_true > .in
  select.case_false > .out
}
component Temperature() trigger -> message {
    temp : sensor.TriggeredTemperature()
    text : std.Constant(data="the temperature is ")
    plus : math.Compute(op="+")

    .trigger > temp.trigger
    text.token > plus.a
    temp.centigrade > plus.b
    plus.result > .message
}

temp : Temperature()
rfid : ClearRFID()
mp : MediaPlayer()

inorout : InOrOut()
mput : MediaPlayer()


camera : media.IPCamera()
render : media.MultipleImageRenderer()
antalmush2 : text.Mustache(fmt="There is {{antal}} person in this room")
antalmush : text.Mustache(fmt="There are {{antal}} people in this room")
push : web.Pushbullet(title="Welcome to garage, please keep up with the garage info?")
people : room.PersonCounter()
switch : flow.Switch()
compare : std.Compare(rel="=")
rum : json.GetValue()


/*getv : json.GetValue()*/
/*getid : json.GetValue()*/
antaldic : json.Dict()

length : text.Length()
print : io.Print()


rfid.ontrue > inorout.data

inorout.in > people.id
"garage" > people.room
people.rooms > rum.container
"garage" > rum.key
rum.value > length.string

length.length > compare.a
1 > compare.b
length.length > antaldic.value
antaldic.dict > antalmush2.dict


compare.result > switch.switch
antalmush2.text > switch.a
antalmush.text > switch.b

switch.b > push.message
switch.a > voidport


length.length > inorout.antal

"antal" > antaldic.key
antaldic.dict > antalmush.dict
antalmush.text > print.token

inorout.out > render.remove
inorout.out > mput.dict
inorout.in > camera.trigger
inorout.in > mp.dict
camera.image > render.image
inorout.in > temp.trigger
inorout.in > render.id
  /*här lägger jag alla onödig portar som ska gå till void typ en sophög*/
camera.status > voidport
people.status > voidport
temp.message > voidport
