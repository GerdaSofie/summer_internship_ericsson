rel=define CONTROL_URI = "http://192.168.0.139:5001"
define APPNAME = "migrate_room"
define FILE = "testprint.calvin"

component CalvinDeployer(control_uri) name, script, deploy_info -> app_info {
    sec_credentials:std.Constant(data={})
    controlpath: std.Constant(data=control_uri)
    deploy: calvin.CalvinDeployerA()
    post: net.HTTPPost()

    sec_credentials.token > deploy.sec_credentials
    .name > deploy.name
    .script > deploy.script
    .deploy_info > deploy.deploy_info
    deploy.app_info > .app_info

    controlpath.token > voidport
    controlpath.token > deploy.control_uri

    deploy.URL > post.URL
    deploy.params > post.params
    deploy.header > post.header
    deploy.data > post.data

    post.status > deploy.status
    post.header > deploy.header
    post.data > deploy.data
}

component CalvinMigrater(control_uri, deploy_info) app_id, key -> done {
    controlpath: flow.Init(data=control_uri)
    migrate: calvin.CalvinMigraterA(deploy_info=deploy_info)
    post: net.HTTPPost()

    .app_id > migrate.app_id
    .key > migrate.key

    voidport > controlpath.in
    controlpath.out > migrate.control_uri

    migrate.URL > post.URL
    migrate.params > post.params
    migrate.header > post.header
    migrate.data > post.data
    migrate.done > .done

    post.status > migrate.status
    post.header > migrate.header
    post.data > voidport
}

component Migrator() room , app_id -> done {
  migrate: CalvinMigrater(control_uri=CONTROL_URI, deploy_info=
  {
     "stationGarage":
     {
          "requirements":
          {
  	    "log":[{"op": "node_attr_match","kwargs": {"index": ["address", {"room": "Garage"}]}, "type": "+"}],
          }
      },
      "stationLego":
      {
          "requirements":
          {
  	    "log":[{"op": "node_attr_match","kwargs": {"index": ["address", {"room": "Lego"}]}, "type": "+"}],

          }
      }
  })
  deselect : flow.Deselect()
  compare : std.Compare(rel="=")
  log : io.Log(loglevel="INFO")

  .app_id > migrate.app_id
  .room > compare.a
  "stationGarage" > compare.b
  compare.result > log.data
  compare.result > deselect.select
  "stationGarage" > deselect.case_true
  "stationLego" > deselect.case_false
  deselect.data > migrate.key
  migrate.done > .done
}

component RFIDReader() -> data, room {
  rfidGarage : sensor.RFIDReader()
  rfidLego : sensor.RFIDReader()
  constantGarage : std.Constantify(constant=1)
  constantLego : std.Constantify(constant=2)
  joinConstant : flow.Collect()
  compare : std.Compare(rel="=")
  deselect : flow.Deselect()
  joinData : flow.Collect()
  log1 : io.Log(loglevel="INFO")
  log2 : io.Log(loglevel="INFO")
  selectgarage : flow.Select()
  selectlego : flow.Select()
  garagestatus : json.GetValue()
  legostatus : json.GetValue()

  voidport > rfidGarage.data
  rfidGarage.data > selectgarage.data
  rfidGarage.data > garagestatus.container
  "status" > garagestatus.key
  garagestatus.value > selectgarage.select
  selectgarage.case_true > joinData.token
  selectgarage.case_true > constantGarage.in
  selectgarage.case_false > voidport

  voidport > rfidLego.data
  rfidLego.data > selectlego.data
  rfidLego.data > legostatus.container
  "status" > legostatus.key
  legostatus.value > selectlego.select
  selectlego.case_true > joinData.token
  selectlego.case_true > constantLego.in
  selectlego.case_false > voidport

  constantGarage.out > joinConstant.token
  constantLego.out > joinConstant.token
  joinConstant.token > compare.b
  1 > compare.a

  compare.result > deselect.select
  "stationGarage" > deselect.case_true
  "stationLego" > deselect.case_false
  deselect.data > .room
  voidport > log1.data
  joinData.token > .data
  voidport > log2.data
}

component PeopleCounter() data, room -> output, count{
people : room.PersonCounter()
getv : json.GetValue()
length : text.Length()
rum : json.GetValue()

.data > getv.container

"data" > getv.key
getv.value > people.id
.room > people.room

people.status > .output
people.rooms > rum.container
.room > rum.key
rum.value > length.string
length.length > .count
}

component Temperature() trigger -> message {
    temp : sensor.TriggeredTemperature()
    text : std.Constant(data="the temperature is ")
    plus : math.Compute(rel="+")

    .trigger > temp.trigger
    text.token > plus.a
    temp.centigrade > plus.b
    plus.result > .message
}

component InOrOut() data, antal -> in, out {
  select : flow.Select()
  getv : json.GetValue()
  compare : std.Compare(rel=">=")
  init : flow.Init(data="1")

  .data > getv.container
  "data" > getv.key

  .antal > compare.a
  .antal > init.in
  init.out > compare.b
  compare.result > select.select
  getv.value > select.data
  select.case_true > .in
  select.case_false > .out

}

component Picture() id, remove -> {
  camera : media.IPCamera()
  render : media.MultipleImageRenderer()

  .id > camera.trigger
  camera.status > voidport
  camera.image > render.image
  .id > render.id
  .remove > render.remove

}

component MediaPlayer() dict -> {
    dict : json.Dict()
    const : std.Constant(data=true)
    mush : text.Mustache(fmt="{{data}}.ogg")
    player : media.MediaPlayer2()

    .dict > dict.value
    "data" > dict.key
    dict.dict > mush.dict
    mush.text > player.mediafile
    const.token > player.play

}


deploy_info : std.Constant(data=
{
    "requirements":
    {
        "log":[{"op": "node_attr_match", "kwargs": {"index": ["address", {"name": "Garage"}]},"type":"+"}]

    }
})

name : flow.Init(data=APPNAME)

camera : Picture()
InorOut : InOrOut()
mediaPlayer : MediaPlayer()
temperatur : Temperature()

filereader: io.FileReader()
linejoin : text.LineJoin()

# rt control
deploy: CalvinDeployer(control_uri=CONTROL_URI)
rfid : RFIDReader()
migrator : Migrator()
peopleCounter : PeopleCounter()
print : io.Log(loglevel="INFO")
print2 : io.Log(loglevel="INFO")

# deploy
FILE > filereader.filename
filereader.out > linejoin.line
linejoin.text > deploy.script
voidport > name.in
name.out > deploy.name
deploy_info.token > deploy.deploy_info
deploy.app_info > migrator.app_id

rfid.room > peopleCounter.room
rfid.data > peopleCounter.data

peopleCounter.output > voidport
voidport > print2.data
peopleCounter.count > voidport
rfid.room > print.data
rfid.room > migrator.room
migrator.done > voidport

rfid.data > InorOut.data
peopleCounter.count > InorOut.antal
InorOut.in > camera.id
InorOut.in > mediaPlayer.dict
InorOut.out > camera.remove
InorOut.in > temperatur.trigger
temperatur.message > voidport
