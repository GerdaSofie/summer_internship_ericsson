define CONTROL_URI = "192.168.0.139:5001"
define APPNAME = "migrate_room"
define FILE = "testprint.calvin"

### Components ###
/*This component sends information to the PhilipsHue-light*/
component PhilipsHue(address, username, lightno) on, saturation, brightness, hue -> status {
    url : URLBuilder(address=address, username=username, lightno=lightno)
    command : CmdBuilder()
    light : net.HTTPPut()

    .on > command.on
    .saturation > command.sat
    .brightness > command.bri
    .hue > command.hue

    url.url > light.URL
    {} > light.params
    command.string > light.data
    {"Content-Type": "application/json"} > light.header

    light.status > .status
    light.header > voidport
    light.data > voidport
}
/*This component creates a light.*/
component StopLight(address, username, lightno,red, green, blue) state -> status {
light : PhilipsHue(address=address, username=username, lightno=lightno)
rgb : RgbBuilder(red=red, green=green,blue=blue)
bool:   flow.Bool()
select : flow.Deselect()


.state > bool.token
bool.bool > select.select
rgb.saturation > light.saturation
rgb.brightness > light.brightness
rgb.hue > light.hue

true > select.case_true
false > select.case_false
select.data > light.on
light.status > .status

}
/*The component builds an URL which is used to send information to the PhilipsHue-light*/
component URLBuilder(address, username, lightno) -> url {
    format : text.Format(fmt="http://{address}/api/{username}/lights/{lightno}/state")
    set_address : json.SetValue()
    set_username : json.SetValue()
    set_lightno : json.SetValue()

    {} > set_address.container
    "address" > set_address.key
    address > set_address.value
    set_address.container > set_username.container
    "username" > set_username.key
    username > set_username.value
    set_username.container > set_lightno.container
    "lightno" > set_lightno.key
    lightno > set_lightno.value
    set_lightno.container > format.dict
    format.text > .url
}
/*This component makes a light flash red when triggered by the input.*/
component RedFlashLight(address, username, lightno, interval) input-> {
  light : StopLight(address=address, username=username, lightno=lightno,red=255, green=0, blue=0)
  itemize : json.Items()
  pacer : std.ClassicDelay(delay=interval)
  bool : flow.Bool()
  select : flow.Select()
  alternate : flow.Alternate2()

  .input > select.select
  [1,1,1,1,1] > select.data
  select.case_true > itemize.list
  select.case_false > voidport
  itemize.item > bool.token
  bool.bool > pacer.token
  pacer.token > alternate.token_1
  false > alternate.token_2
  alternate.token > light.state
  light.status > voidport
}
/*The component creates a green light that is lit for interval seconds. */
component GreenOkLight(address, username, lightno, time) input-> {
  light : StopLight(address=address, username=username, lightno=lightno,red=0, green=255, blue=0)
  pacer : std.ClassicDelay(delay=time)
  alternate : flow.Alternate2()

  .input > alternate.token_1
  false > alternate.token_2
  alternate.token > pacer.token
  pacer.token > light.state
  light.status > voidport
}
/*The component builds a string to send to the Philips-hue light.*/
component CmdBuilder() on, sat, bri, hue -> string {
    to_str : json.ToString()
    set_on : json.SetValue()
    set_sat: json.SetValue()
    set_bri: json.SetValue()
    set_hue: json.SetValue()

    {} > set_on.container
    "on" > set_on.key
    .on > set_on.value

    set_on.container > set_sat.container
    "sat" > set_sat.key
    .sat > set_sat.value

    set_sat.container > set_bri.container
    "bri" > set_bri.key
    .bri > set_bri.value

    set_bri.container > set_hue.container
    "hue" > set_hue.key
    .hue > set_hue.value

    set_hue.container > to_str.data
    to_str.string > .string
}
/*The component takes values for red, green and blur and converts them into saturation, brightness and hue.*/
component RgbBuilder(red, green, blue) -> saturation, brightness, hue {
redgb : math.RGBtoHSL()

red > redgb.red
green > redgb.green
blue > redgb.blue
redgb.hue > .hue
redgb.saturation > .saturation
redgb.brightness > .brightness
}

/*Deploys the application that is sent in as a script.*/
component CalvinDeployer(control_uri) name, script, deploy_info -> app_info {
    sec_credentials:std.Constant(data={})
    controlpath: std.Constant(data=control_uri)
    deploy: calvin.CalvinDeployerA()
    post: net.HTTPPost()

    sec_credentials.token > deploy.sec_credentials
    .name > deploy.name
    .script > deploy.script
    .deploy_info > deploy.deploy_info
    deploy.app_info > .app_info

    controlpath.token > voidport
    controlpath.token > deploy.control_uri

    deploy.URL > post.URL
    deploy.params > post.params
    deploy.header > post.header
    deploy.data > post.data

    post.status > deploy.status
    post.header > deploy.header
    post.data > deploy.data
}
/*Migrates an application depending on the input-key*/
component CalvinMigrater(control_uri, deploy_info) app_id, key -> done {
    controlpath: flow.Init(data=control_uri)
    migrate: calvin.CalvinMigraterA(deploy_info=deploy_info)
    post: net.HTTPPost()

    .app_id > migrate.app_id
    .key > migrate.key

    voidport > controlpath.in
    controlpath.out > migrate.control_uri

    migrate.URL > post.URL
    migrate.params > post.params
    migrate.header > post.header
    migrate.data > post.data
    migrate.done > .done

    post.status > migrate.status
    post.header > migrate.header
    post.data > voidport
}
/*This component migrates to the specified room if the status is True.*/
component Migrator() room , app_id, status-> done {
  migrate: CalvinMigrater(control_uri=CONTROL_URI, deploy_info=
  {
     "stationGarage":
     {
          "requirements":
          {
  	    "log":[{"op": "node_attr_match","kwargs": {"index": ["address", {"room": "Garage"}]}, "type": "+"}],
          }
      },
      "stationLego":
      {
          "requirements":
          {
  	    "log":[{"op": "node_attr_match","kwargs": {"index": ["address", {"room": "Lego"}]}, "type": "+"}],

          }
      }
  })
  deselect : flow.Deselect()
  selectMigrate : flow.Select()
  compare : std.Compare(rel="=")

  .app_id > migrate.app_id
  .room > compare.a
  "stationGarage" > compare.b
  compare.result > deselect.select
  "stationGarage" > deselect.case_true
  "stationLego" > deselect.case_false
  deselect.data > selectMigrate.data
  .status > selectMigrate.select
  selectMigrate.case_true > migrate.key
  selectMigrate.case_false > voidport
  migrate.done > .done
}
/*Ska migrera när man får data på rfid-läsaren. Skickar vidare datan samt stationLego eller stationGarage*/
component RFIDReader() -> data, room {
  rfidGarage : sensor.RFIDReader()
  rfidLego : sensor.RFIDReader()
  constantGarage : std.Constantify(constant=1)
  constantLego : std.Constantify(constant=2)
  joinConstant : flow.Join()
  compare : std.Compare(rel="=")
  deselect : flow.Deselect()
  joinData : flow.Join()

  voidport > rfidGarage.data
  rfidGarage.data > joinData.token_1
  rfidGarage.data > constantGarage.in

  voidport > rfidLego.data
  rfidLego.data > joinData.token_2
  rfidLego.data > constantLego.in

  constantGarage.out > joinConstant.token_1
  constantLego.out > joinConstant.token_2
  joinConstant.token > compare.b
  1 > compare.a

  compare.result > deselect.select
  "stationGarage" > deselect.case_true
  "stationLego" > deselect.case_false
  deselect.data > .room
  joinData.token > .data
}

component Lights() room, status -> {
  flashRedGarage : RedFlashLight(address="192.168.0.141", username="191db4b57899c277637781315c1f53", lightno=3, interval=1.0)
  flashGreenGarage : GreenOkLight(address="192.168.0.141", username="191db4b57899c277637781315c1f53", lightno=3, time=5.0)
  flashRedLego : RedFlashLight(address="192.168.0.141", username="191db4b57899c277637781315c1f53", lightno=2, interval=1.0)
  flashGreenLego : GreenOkLight(address="192.168.0.141", username="191db4b57899c277637781315c1f53", lightno=2, time=5.0)
  compare : std.Compare(rel="=")
  selectLight : flow.Select()
  selectGarage : flow.Select()
  selectLego : flow.Select()

  .room > compare.a
  "stationGarage" > compare.b
  compare.result > selectLight.select
  .status > selectLight.data
  selectLight.case_true > selectGarage.select
  selectLight.case_false > selectLego.select

  /*Skicka vidare vilket rum det är, samt datan*/
  true > selectGarage.data
  selectGarage.case_true > flashGreenGarage.input
  selectGarage.case_false > flashRedGarage.input

  true > selectLego.data
  selectLego.case_true > flashGreenLego.input
  selectLego.case_false > flashRedLego.input
}

/*The component counts the people in a room, and the input is the data sent from the RFID. Output gives true if the person was checked-in ok and count is the amoutn of people.*/
component PeopleCounter() data, room -> output, count{
/*True stands for stationGarage, false stands for stationLego*/
people : room.PersonCounter()
getv : json.GetValue()
length : text.Length()
select : flow.Select()
status : json.GetValue()
rum : json.GetValue()

.data > select.data
.data > status.container
"status" > status.key
status.value > select.select

select.case_false > voidport
select.case_true > getv.container

"data" > getv.key
getv.value > people.id
.room > people.room

people.status > .output
people.rooms > rum.container
.room> rum.key
rum.value > length.string
length.length > .count
}
### Actor instances ###
#script file
filereader: io.FileReader()
linejoin : text.LineJoin()

#deploy info
deploy_info: std.Constant(data=
{
    "requirements":
    {
        "log":[{"op": "node_attr_match", "kwargs": {"index": ["address", {"name": "Garage"}]},"type":"+"}]

    }
})

# name
name : flow.Init(data=APPNAME)
# rt control
deploy: CalvinDeployer(control_uri=CONTROL_URI)
rfid : RFIDReader()
lights : Lights()
peopleCounter : PeopleCounter()
migrator : Migrator()

print : io.Print()

# deploy
FILE > filereader.filename
filereader.out > linejoin.line
linejoin.text > deploy.script
voidport > name.in
name.out > deploy.name
deploy_info.token > deploy.deploy_info
deploy.app_info > migrator.app_id

rfid.room > peopleCounter.room
rfid.data > peopleCounter.data
rfid.room > lights.room

peopleCounter.output > migrator.status
peopleCounter.output > lights.status
rfid.room > migrator.room
peopleCounter.output > print.token
peopleCounter.count > voidport
migrator.done > voidport
