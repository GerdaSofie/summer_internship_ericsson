/* This application deploys another application, defined by the chosen FILE.
/* The application can also migrate actors defined in the Migrator-component. The migration is triggered by RFID-readers.
/* When a RFID-reader is triggered by data from a card, a light flashed green. At the same time, a photograph is taken if the RFID-reader is in the "Office".
/* Different sound-files are played the first and second time you blip the card to the reader.

define CONTROL_URI = "http://192.168.0.125:5001"
define APPNAME = "migrating_room"
define FILE = "runningapplication.calvin"

/*The component depoys an application specified by the name, script and deploy_info.*/
component CalvinDeployer(control_uri) name, script, deploy_info -> app_info {
    sec_credentials:std.Constant(data={})
    controlpath: std.Constant(data=control_uri)
    deploy: calvin.CalvinDeployerA()
    post: net.HTTPPost()

    sec_credentials.token > deploy.sec_credentials
    .name > deploy.name
    .script > deploy.script
    .deploy_info > deploy.deploy_info
    deploy.app_info > .app_info

    controlpath.token > voidport
    controlpath.token > deploy.control_uri

    deploy.URL > post.URL
    deploy.params > post.params
    deploy.header > post.header
    deploy.data > post.data

    post.status > deploy.status
    post.header > deploy.header
    post.data > deploy.data
}
/*The component migrates an application specified by the control_uri and the deploy-info.*/
component CalvinMigrater(control_uri, deploy_info) app_id, key -> done {
    controlpath: flow.Init(data=control_uri)
    migrate: calvin.CalvinMigraterA(deploy_info=deploy_info)
    post: net.HTTPPost()

    .app_id > migrate.app_id
    .key > migrate.key

    voidport > controlpath.in
    controlpath.out > migrate.control_uri

    migrate.URL > post.URL
    migrate.params > post.params
    migrate.header > post.header
    migrate.data > post.data
    migrate.done > .done

    post.status > migrate.status
    post.header > migrate.header
    post.data > voidport
}
/*The component uses a CalvinMigrater-component to migrate to the right room.*/
component Migrator() room , app_id -> done {
  migrate: CalvinMigrater(control_uri=CONTROL_URI, deploy_info=
  {
     "Forest":
     {
          "requirements":
          {
  	    "temp":[{"op": "node_attr_match","kwargs": {"index": ["address", {"room": "Garage"}]}, "type": "+"}],

          }
      },
      "Office":
      {
          "requirements":
          {
  	    "temp":[{"op": "node_attr_match","kwargs": {"index": ["address", {"room": "Lego"}]}, "type": "+"}],

          }
      }
  })
  deselect : flow.Deselect()
  compare : std.Compare(rel="=")
  log : io.Log(loglevel="INFO")

  .app_id > migrate.app_id
  .room > compare.a
  "Forest" > compare.b
  compare.result > log.data
  compare.result > deselect.select
  "Forest" > deselect.case_true
  "Office" > deselect.case_false
  deselect.data > migrate.key
  migrate.done > .done
}
/*The component has two RFID-readers and sends out data from them, and the other outport specifies which room/reader the data comes from.*/
component RFIDReader() -> data, room {
  rfidoffice : sensor.RFIDReader()
  rfidforest : sensor.RFIDReader()
  constantoffice : std.Constantify(constant=1)
  constantforest : std.Constantify(constant=2)
  joinConstant : flow.Collect()
  compare : std.Compare(rel="=")
  deselect : flow.Deselect()
  joinData : flow.Collect()
  log1 : io.Log(loglevel="INFO")
  log2 : io.Log(loglevel="INFO")
  selectoffice : flow.Select()
  selectforest : flow.Select()
  officestatus : json.GetValue()
  foreststatus : json.GetValue()

  voidport > rfidoffice.data
  rfidoffice.data > selectoffice.data
  rfidoffice.data > officestatus.container
  "status" > officestatus.key
  officestatus.value > selectoffice.select
  selectoffice.case_true > joinData.token
  selectoffice.case_true > constantoffice.in
  selectoffice.case_false > voidport

  voidport > rfidforest.data
  rfidforest.data > selectforest.data
  rfidforest.data > foreststatus.container
  "status" > foreststatus.key
  foreststatus.value > selectforest.select
  selectforest.case_true > joinData.token
  selectforest.case_true > constantforest.in
  selectforest.case_false > voidport

  constantoffice.out > joinConstant.token
  constantforest.out > joinConstant.token
  joinConstant.token > compare.b
  joinConstant.token > log1.data
  1 > compare.a

  compare.result > deselect.select
  "Forest" > deselect.case_true
  "Office" > deselect.case_false
  deselect.data > .room
  deselect.data > log2.data

  joinData.token > .data
}
/*The component takes room and data as input and gives the amount of people checked in to the specified room.*/
component PeopleCounter() data, room -> count{
  people : room.PersonCounter()
  getv : json.GetValue()
  length : text.Length()
  rum : json.GetValue()

  .data > getv.container

  "data" > getv.key
  getv.value > people.id
  .room > people.room

  people.status > voidport
  people.rooms > rum.container
  .room > rum.key
  rum.value > length.string
  length.length > .count
}
/*The component takes data from the RFID-reader and count (number of checked in people). It returns the id from the data on the in- or out- outport depending on if the person is coming or leaving the room. */
component InOrOut() data, count -> in, out {
  select : flow.Select()
  getv : json.GetValue()
  compare : std.Compare(rel="<=")
  init : flow.Init(data=1)
  print : io.Print()

  .data > getv.container
  "data" > getv.key

  .count > compare.b
  .count > print.token
  .count > init.in
  init.out > compare.a
  compare.result > select.select
  getv.value > select.data
  select.case_true > .in
  select.case_false > .out
}
/*The component takes a picture with the specified id from the RFID-card. It removes the card from teh MultipleImageRender if remove is true.*/
component Picture() id, remove -> {
  camera : media.IPCamera()
  render : media.MultipleImageRenderer()

  .id >  camera.trigger
  .id > render.id
  camera.image > render.image
  .remove > render.remove
  camera.status > voidport
}
/*The component plays a sound when the RFID-reader is bliped for the first time (If the person arrives to the room.)*/
component MediaPlayerIn() dict-> {
    dict : json.Dict()
    const : std.Constant(data=true)
    mush : text.Mustache(fmt="{{data}}.ogg")
    player : media.MediaPlayer2()

    .dict > dict.value
    "data" > dict.key
    dict.dict > mush.dict
    mush.text > player.mediafile
    const.token > player.play
}
/*The component plays a sound when the person leaves a room.Different sounds are played depending on the id from the RFID-card.*/
component MediaPlayerUt() dict -> {
  dict : json.Dict()
  const : std.Constant(data=true)
  mush : text.Mustache(fmt="{{data}}_ut.ogg")
  player : media.MediaPlayer2()

  .dict > dict.value
  "data" > dict.key
  dict.dict > mush.dict
  mush.text > player.mediafile
  const.token > player.play
}
/*This component sends an url with information to a PhilipsHue-light*/
component PhilipsHue(address, username, lightno) on, saturation, brightness, hue -> status {
    url : URLBuilder(address=address, username=username, lightno=lightno)
    command : CmdBuilder()
    light : net.HTTPPut()

    .on > command.on
    .saturation > command.sat
    .brightness > command.bri
    .hue > command.hue

    url.url > light.URL
    {} > light.params
    command.string > light.data
    {"Content-Type": "application/json"} > light.header
    light.status > .status
    light.header > voidport
    light.data > voidport
}
/*This component creates a philips-hue light.*/
component StopLight(address, username,red, green, blue,lightno) state-> status {
  light : PhilipsHue(address=address, username=username, lightno=lightno)
  rgb : RgbBuilder(red=red, green=green,blue=blue)
  bool:   flow.Bool()
  select : flow.Deselect()

  .state > bool.token
  bool.bool > select.select
  rgb.saturation > light.saturation
  rgb.brightness > light.brightness
  rgb.hue > light.hue

  true > select.case_true
  false > select.case_false
  select.data > light.on
  light.status > .status
}
/*This component creates a url with information to send to the light.*/
component URLBuilder(address, username ,lightno) -> url {
    format : text.Format(fmt="http://{address}/api/{username}/lights/{lightno}/state")
    set_address : json.SetValue()
    set_username : json.SetValue()
    set_lightno : json.SetValue()

    {} > set_address.container
    "address" > set_address.key
    address > set_address.value
    set_address.container > set_username.container
    "username" > set_username.key
    username > set_username.value
    set_username.container > set_lightno.container
    "lightno" > set_lightno.key
    lightno > set_lightno.value
    set_lightno.container > format.dict
    format.text > .url
}
/*The component creates a light with a PhilipsHue-light adn makes it flash green, when triggered by the input.*/
component GreenFlashLight(address, username,interval, lightno) input-> {
  light : StopLight(address=address, username=username,red=0, green=255, blue=0,lightno=lightno)
  itemize : json.Items()
  pacer : std.ClassicDelay(delay=interval)
  bool : flow.Bool()
  alternate : flow.Alternate2()
  select : flow.Select()

  .input > select.select
  [1,1,1] > select.data
  select.case_true > itemize.list
  select.case_false > voidport
  itemize.item > bool.token
  bool.bool > pacer.token
  pacer.token > alternate.token_1
  false > alternate.token_2
  alternate.token > light.state
  light.status > voidport
}
/*This component builds up a string with information to sent to the PhilipsHue-light.*/
component CmdBuilder() on, sat, bri, hue -> string {
    to_str : json.ToString()
    set_on : json.SetValue()
    set_sat: json.SetValue()
    set_bri: json.SetValue()
    set_hue: json.SetValue()

    {} > set_on.container
    "on" > set_on.key
    .on > set_on.value

    set_on.container > set_sat.container
    "sat" > set_sat.key
    .sat > set_sat.value

    set_sat.container > set_bri.container
    "bri" > set_bri.key
    .bri > set_bri.value

    set_bri.container > set_hue.container
    "hue" > set_hue.key
    .hue > set_hue.value

    set_hue.container > to_str.data
    to_str.string > .string
}
/*The component triggers a GreenFlashLight depending on which room that is sent in on the inport.*/
component Lights() room -> {
  flashGreenOffice : GreenFlashLight(address="192.168.0.141", username="191db4b57899c277637781315c1f53",interval=1.0,lightno=2)
  flashGreenForest : GreenFlashLight(address="192.168.0.141", username="191db4b57899c277637781315c1f53",interval=1.0,lightno=3)
  compare : std.Compare(rel="=")
  selectLight : flow.Select()
  bool : flow.Bool()

  .room > compare.a
  "Office" > compare.b
  compare.result > selectLight.select
  selectLight.case_false > flashGreenOffice.input
  .room > bool.token
  bool.bool > selectLight.data
  selectLight.case_true > flashGreenForest.input
}
/*The component uses a RGBtoHSL-actor to convert RGB to HSL, which in a later step is used by the Philips-hue light.*/
component RgbBuilder(red, green, blue) -> saturation, brightness, hue {
  redgb : math.RGBtoHSL()

  red > redgb.red
  green > redgb.green
  blue > redgb.blue
  redgb.hue > .hue
  redgb.saturation > .saturation
  redgb.brightness > .brightness
}
/*The component sends out a json with the "room" and "count" as keys.*/
component PushbulletBuilder() room, count -> json {
  set_room : json.SetValue()
  set_count: json.SetValue()

  {} > set_room.container
  "room" > set_room.key
  .room > set_room.value

  set_room.container > set_count.container
  "count" > set_count.key
  .count > set_count.value

  set_count.container > .json
}

  /*Actors*/
deploy_info : std.Constant(data=
{
    "requirements":
    {
        "temp":[{"op": "node_attr_match", "kwargs": {"index": ["address", {"name": "Garage"}]},"type":"+"}],
        "moisture":[{"op": "node_attr_match", "kwargs": {"index": ["address", {"name": "Home"}]},"type":"+"}],
        "bullet":[{"op": "node_attr_match", "kwargs": {"index": ["address", {"name": "Home"}]},"type":"+"}]


    }
})

name : flow.Init(data=APPNAME)
filereader: io.FileReader()
linejoin : text.LineJoin()
# Mediaplayers
mediaPlayer : MediaPlayerIn()
mediaPlayerUt : MediaPlayerUt()
# Lights
lights : Lights()
# Deployment- and Migrating-actors
deploy: CalvinDeployer(control_uri=CONTROL_URI)
migrator : Migrator()
# Other..
InorOut : InOrOut()
camera : Picture()
cmd : PushbulletBuilder()
fmt : text.Format(fmt="Welcome to the {room}! The amount of people in this room are {count}. Follow the channel on Pushbullet for more information. ")
bullet : web.Pushbullet(title="Room-Wisperer")
rfid : RFIDReader()
peopleCounter : PeopleCounter()
compare1 : std.Compare(rel="=")
print2 : io.Log(loglevel="INFO")
# printpush : io.Log(loglevel="INFO")
select : flow.Select()
bool : flow.Bool()
selecter : flow.Select()

 /*Connections*/
FILE > filereader.filename
filereader.out > linejoin.line
linejoin.text > deploy.script
voidport > name.in
name.out > deploy.name
deploy_info.token > deploy.deploy_info
deploy.app_info > migrator.app_id

rfid.room > peopleCounter.room
rfid.data > peopleCounter.data
peopleCounter.count > cmd.count
rfid.room > cmd.room
peopleCounter.count > print2.data
rfid.room > migrator.room
migrator.done > voidport

rfid.room > lights.room
cmd.json > fmt.dict
rfid.data > InorOut.data

rfid.room > compare1.a
"Office" > compare1.b
compare1.result > select.select
InorOut.in > select.data
select.case_true > camera.id
select.case_false > voidport

peopleCounter.count > InorOut.count
InorOut.out > camera.remove
InorOut.out > mediaPlayerUt.dict
InorOut.in > bool.token
bool.bool > selecter.select
fmt.text > selecter.data
selecter.case_true > bullet.message
selecter.case_false > voidport
InorOut.in > mediaPlayer.dict
